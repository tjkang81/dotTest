using Dottest.Example.BankExample;
using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;

namespace Dottest.Example.BankExample.DotTest.Factories
{
    [TestFixture(), ObjectFactoryType()]
    public class CustomerFactory
    {
        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "+zmeOA")]
        public static Customer CreateCustomer01()
        {
            string name = "Jack Black";
            int zip = 31242;
            string socialSecurityNumber = SocialSecurityNumberFactory.CreateSocialSecurityNumberFactory02();
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer01()
        {
            Customer customer = CreateCustomer01();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jack Black", customer.Name);
            Assert.AreEqual("821-32-3123", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "/EeoSg")]
        public static Customer CreateCustomer02()
        {
            string name = "John Gray";
            int zip = 21032;
            string socialSecurityNumber = SocialSecurityNumberFactory.CreateSocialSecurityNumberFactory03();
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer02()
        {
            Customer customer = CreateCustomer02();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("John Gray", customer.Name);
            Assert.AreEqual("187-54-0045", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "+juccA")]
        public static Customer CreateCustomer03()
        {
            string name = "Jessica White";
            int zip = 31242;
            string socialSecurityNumber = SocialSecurityNumberFactory.CreateSocialSecurityNumberFactory03();
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer03()
        {
            Customer customer = CreateCustomer03();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jessica White", customer.Name);
            Assert.AreEqual("187-54-0045", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "/ESMvQ")]
        public static Customer CreateCustomer04()
        {
            string name = "Jack Black";
            int zip = 0;
            string socialSecurityNumber = SocialSecurityNumberFactory.CreateSocialSecurityNumberFactory03();
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer04()
        {
            Customer customer = CreateCustomer04();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jack Black", customer.Name);
            Assert.AreEqual("187-54-0045", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "+OZtFg")]
        public static Customer CreateCustomer05()
        {
            string name = "John Gray";
            int zip = 31242;
            string socialSecurityNumber = string.Empty;
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer05()
        {
            Customer customer = CreateCustomer05();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("John Gray", customer.Name);
            Assert.AreEqual("", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "+nmgMg")]
        public static Customer CreateCustomer06()
        {
            string name = "Jessica White";
            int zip = 0;
            string socialSecurityNumber = string.Empty;
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer06()
        {
            Customer customer = CreateCustomer06();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jessica White", customer.Name);
            Assert.AreEqual("", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "/7yc8w")]
        public static Customer CreateCustomer07()
        {
            string name = "Jack Black";
            int zip = 21032;
            string socialSecurityNumber = null;
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer07()
        {
            Customer customer = CreateCustomer07();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jack Black", customer.Name);
            Assert.IsNull(customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "/2yKXA")]
        public static Customer CreateCustomer08()
        {
            string name = "John Gray";
            int zip = 0;
            string socialSecurityNumber = null;
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer08()
        {
            Customer customer = CreateCustomer08();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("John Gray", customer.Name);
            Assert.IsNull(customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "/nTzZw")]
        public static Customer CreateCustomer09()
        {
            string name = "Jessica White";
            int zip = 21032;
            string socialSecurityNumber = SocialSecurityNumberFactory.CreateSocialSecurityNumberFactory01();
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer09()
        {
            Customer customer = CreateCustomer09();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jessica White", customer.Name);
            Assert.AreEqual("223-124-123", customer.SocialSecurityNumber);
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/1+HHA", "+G0svQ")]
        public static Customer CreateCustomer10()
        {
            string name = "Jack Black";
            int zip = 31242;
            string socialSecurityNumber = SocialSecurityNumberFactory.CreateSocialSecurityNumberFactory01();
            Customer customer = new Customer(name, zip);
            customer.SocialSecurityNumber = socialSecurityNumber;
            return customer;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [Test]
        public void TestCreateCustomer10()
        {
            Customer customer = CreateCustomer10();
            Assert.IsNotNull(customer);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(customer.Name);
            recorder.Record(customer.SocialSecurityNumber);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Jack Black", customer.Name);
            Assert.AreEqual("223-124-123", customer.SocialSecurityNumber);
            #endregion
        }

    }
}
